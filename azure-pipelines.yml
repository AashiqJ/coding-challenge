trigger:
- master

variables:
  dockerRegistryServiceConnection: 'ibmtestserviceconnection'
  imageRepository: 'ibmtestrepo'
  containerRegistry: 'ibmtestregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.SourceVersion)'

pool:
    name: 'ibm-test-agent'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - script: |
        docker image rm $(imageRepository):$(tag)
      displayName: 'Clean Up'

- stage: Deploy
  pool:
    name: "ibm-test-agent" 
  dependsOn:
  - Build
  variables:
  - name: NAMESPACE
    value: 'ibm-test'
  - name: SERVICE_NAME
    value: 'test'
  - name: SERVICE_PORT
    value: '5000'
  - name: DOCKER_IMAGE_NAME
    value: 'ibmtestregistry.azurecr.io/ibmtestrepo'
  - name: HOST_NAME
    value: 'ibm-test.example.com'
  - name: REQUESTED_CPU
    value: '500m'
  - name: REQUESTED_MEMORY
    value: '500Mi'
  - name: LIMIT_CPU
    value: '700m'
  - name: LIMIT_MEMORY
    value: '700Mi'
  - name: IMAGE_TAG
    value: '$(Build.SourceVersion)'
  jobs: 
  - deployment: DeployToTest
    displayName: deploy package
    environment: qa
    strategy: 
      runOnce:
        deploy:
          steps:
            - checkout: self
                    
            - task: CopyFiles@2
              displayName: Copying files
              inputs:
                SourceFolder: '$(Agent.TempDirectory)'
                Contents: "*"
                TargetFolder: '$(Build.Repository.LocalPath)'

            - task: Bash@3
              displayName: Deploy on AKS Cluster
              inputs:
                targetType: 'inline'
                script: |
                  export KUBECONFIG='$(Agent.HomeDirectory)/_work/kubeconfig'
                  kubectl create namespace '$(NAMESPACE)' || true
                  envsubst < ./azure_devops/kubernetes/deploy.yml | kubectl apply -f -
                  kubectl -n ${NAMESPACE} rollout status --watch deployment '$(SERVICE_NAME)-deployment'